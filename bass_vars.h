void (*BASS_Apply3D)(void);
double (*BASS_ChannelBytes2Seconds)(uint32_t handle, uint64_t pos);
uint32_t (*BASS_ChannelFlags)(uint32_t handle, uint32_t flags, uint32_t mask);
bool (*BASS_ChannelFree)(uint32_t handle);
bool (*BASS_ChannelGet3DAttributes)(uint32_t handle, uint32_t* mode, float* min, float* max, uint32_t* iangle, uint32_t* oangle, float* outvol);
bool (*BASS_ChannelGet3DPosition)(uint32_t handle, BASS_3DVECTOR* pos, BASS_3DVECTOR* orient, BASS_3DVECTOR* vel);
bool (*BASS_ChannelGetAttribute)(uint32_t handle, uint32_t attrib, float* value);
uint32_t (*BASS_ChannelGetAttributeEx)(uint32_t handle, uint32_t attrib, void* value, uint32_t size);
uint32_t (*BASS_ChannelGetData)(uint32_t handle, void* buffer, uint32_t length);
uint32_t (*BASS_ChannelGetDevice)(uint32_t handle);
bool (*BASS_ChannelGetInfo)(uint32_t handle, BASS_CHANNELINFO* info);
uint64_t (*BASS_ChannelGetLength)(uint32_t handle, uint32_t mode);
uint32_t (*BASS_ChannelGetLevel)(uint32_t handle);
bool (*BASS_ChannelGetLevelEx)(uint32_t handle, float* levels, float length, uint32_t flags);
uint64_t (*BASS_ChannelGetPosition)(uint32_t handle, uint32_t mode);
const char* (*BASS_ChannelGetTags)(uint32_t handle, uint32_t tags);
uint32_t (*BASS_ChannelIsActive)(uint32_t handle);
bool (*BASS_ChannelIsSliding)(uint32_t handle, uint32_t attrib);
bool (*BASS_ChannelLock)(uint32_t handle, bool lock);
bool (*BASS_ChannelPause)(uint32_t handle);
bool (*BASS_ChannelPlay)(uint32_t handle, bool restart);
bool (*BASS_ChannelRemoveDSP)(uint32_t handle, uint32_t dsp);
bool (*BASS_ChannelRemoveFX)(uint32_t handle, uint32_t fx);
bool (*BASS_ChannelRemoveLink)(uint32_t handle, uint32_t chan);
bool (*BASS_ChannelRemoveSync)(uint32_t handle, uint32_t sync);
uint64_t (*BASS_ChannelSeconds2Bytes)(uint32_t handle, double pos);
bool (*BASS_ChannelSet3DAttributes)(uint32_t handle, int mode, float min, float max, int iangle, int oangle, float outvol);
bool (*BASS_ChannelSet3DPosition)(uint32_t handle, const BASS_3DVECTOR* pos, const BASS_3DVECTOR* orient, const BASS_3DVECTOR* vel);
bool (*BASS_ChannelSetAttribute)(uint32_t handle, uint32_t attrib, float value);
bool (*BASS_ChannelSetAttributeEx)(uint32_t handle, uint32_t attrib, void* value, uint32_t size);
uint32_t (*BASS_ChannelSetDSP)(uint32_t handle, DSPPROC* proc, void* user, int priority);
bool (*BASS_ChannelSetDevice)(uint32_t handle, uint32_t device);
uint32_t (*BASS_ChannelSetFX)(uint32_t handle, uint32_t type, int priority);
bool (*BASS_ChannelSetLink)(uint32_t handle, uint32_t chan);
bool (*BASS_ChannelSetPosition)(uint32_t handle, uint64_t pos, uint32_t mode);
uint32_t (*BASS_ChannelSetSync)(uint32_t handle, uint32_t type, uint64_t param, SYNCPROC* proc, void* user);
bool (*BASS_ChannelSlideAttribute)(uint32_t handle, uint32_t attrib, float value, uint32_t time);
bool (*BASS_ChannelStop)(uint32_t handle);
bool (*BASS_ChannelUpdate)(uint32_t handle, uint32_t length);
int (*BASS_ErrorGetCode)(void);
bool (*BASS_FXGetParameters)(uint32_t handle, void *params);
bool (*BASS_FXReset)(uint32_t handle);
bool (*BASS_FXSetParameters)(uint32_t handle, const void *params);
bool (*BASS_FXSetPriority)(uint32_t handle, int priority);
bool (*BASS_Free)(void);
bool (*BASS_Get3DFactors)(float *distf, float *rollf, float *doppf);
bool (*BASS_Get3DPosition)(BASS_3DVECTOR *pos, BASS_3DVECTOR *vel, BASS_3DVECTOR *front, BASS_3DVECTOR *top);
float (*BASS_GetCPU)(void);
uint32_t (*BASS_GetConfig)(uint32_t option);
const void* (*BASS_GetConfigPtr)(uint32_t option);
uint32_t (*BASS_GetDevice)(void);
bool (*BASS_GetDeviceInfo)(uint32_t device, BASS_DEVICEINFO *info);
bool (*BASS_GetInfo)(BASS_INFO *info);
uint32_t (*BASS_GetVersion)(void);
float (*BASS_GetVolume)(void);
bool (*BASS_Init)(int device, uint32_t freq, uint32_t flags);
uint32_t (*BASS_IsStarted)(void);
bool (*BASS_MusicFree)(uint32_t handle);
uint32_t (*BASS_MusicLoad)(bool mem, const void* file, uint64_t offset, uint32_t length, uint32_t flags, uint32_t freq);
bool (*BASS_Pause)(void);
/*bool (*BASS_RecordFree)(void);
uint32_t (*BASS_RecordGetDevice)(void);
bool (*BASS_RecordGetDeviceInfo)(uint32_t device, BASS_DEVICEINFO *info);
bool (*BASS_RecordGetInfo)(BASS_RECORDINFO *info);
uint32_t (*BASS_RecordGetInput)(int input, float *volume);
const char* (*BASS_RecordGetInputName)(int input);
bool (*BASS_RecordInit)(int device);
bool (*BASS_RecordSetDevice)(uint32_t device);
bool (*BASS_RecordSetInput)(int input, uint32_t flags, float volume);
uint32_t (*BASS_RecordStart)(uint32_t freq, uint32_t chans, uint32_t flags, RECORDPROC *proc, void *user);*/
uint32_t (*BASS_SampleCreate)(uint32_t length, uint32_t freq, uint32_t chans, uint32_t max, uint32_t flags);
bool (*BASS_SampleFree)(uint32_t handle);
uint32_t (*BASS_SampleGetChannel)(uint32_t handle, uint32_t flags);
uint32_t (*BASS_SampleGetChannels)(uint32_t handle, uint32_t *channels);
bool (*BASS_SampleGetData)(uint32_t handle, void *buffer);
bool (*BASS_SampleGetInfo)(uint32_t handle, BASS_SAMPLE *info);
uint32_t (*BASS_SampleLoad)(bool mem, const void *file, uint64_t offset, uint32_t length, uint32_t max, uint32_t flags);
bool (*BASS_SampleSetData)(uint32_t handle, const void *buffer);
bool (*BASS_SampleSetInfo)(uint32_t handle, const BASS_SAMPLE *info);
bool (*BASS_SampleStop)(uint32_t handle);
bool (*BASS_Set3DFactors)(float distf, float rollf, float doppf);
bool (*BASS_Set3DPosition)(const BASS_3DVECTOR *pos, const BASS_3DVECTOR *vel, const BASS_3DVECTOR *front, const BASS_3DVECTOR *top);
bool (*BASS_SetConfig)(uint32_t option, uint32_t value);
bool (*BASS_SetConfigPtr)(uint32_t option, const void* value);
bool (*BASS_SetDevice)(uint32_t device);
bool (*BASS_SetVolume)(float volume);
bool (*BASS_Start)(void);
bool (*BASS_Stop)(void);
uint32_t (*BASS_StreamCreate)(uint32_t freq, uint32_t chans, uint32_t flags, STREAMPROC *proc, void *user);
uint32_t (*BASS_StreamCreateFile)(bool mem, const void *file, uint64_t offset, uint64_t length, uint32_t flags);
uint32_t (*BASS_StreamCreateURL)(const char* url, uint32_t offset, uint32_t flags, DOWNLOADPROC* proc);
bool (*BASS_StreamFree)(uint32_t handle);
uint64_t (*BASS_StreamGetFilePosition)(uint32_t handle, uint32_t mode);
uint32_t (*BASS_StreamPutData)(uint32_t handle, const void *buffer, uint32_t length);
uint32_t (*BASS_StreamPutFileData)(uint32_t handle, const void *buffer, uint32_t length);
bool (*BASS_Update)(uint32_t length);