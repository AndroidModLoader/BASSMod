BASS_Apply3D				= (void(*)(void))dlsym(pBASSHandle, "BASS_Apply3D");
BASS_ChannelBytes2Seconds   = (double(*)(uint32_t, uint64_t))dlsym(pBASSHandle, "BASS_ChannelBytes2Seconds");
BASS_ChannelFlags           = (uint32_t(*)(uint32_t, uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_ChannelFlags");
BASS_ChannelFree            = (bool(*)(uint32_t))dlsym(pBASSHandle, "BASS_ChannelFree");
BASS_ChannelGet3DAttributes = (bool(*)(uint32_t, uint32_t*, float*, float*, uint32_t*, uint32_t*, float*))dlsym(pBASSHandle, "BASS_ChannelGet3DAttributes");
BASS_ChannelGet3DPosition   = (bool(*)(uint32_t, BASS_3DVECTOR*, BASS_3DVECTOR*, BASS_3DVECTOR*))dlsym(pBASSHandle, "BASS_ChannelGet3DPosition");
BASS_ChannelGetAttribute    = (bool(*)(uint32_t, uint32_t, float*))dlsym(pBASSHandle, "BASS_ChannelGetAttribute");
BASS_ChannelGetAttributeEx  = (uint32_t(*)(uint32_t, uint32_t, void*, uint32_t))dlsym(pBASSHandle, "BASS_ChannelGetAttributeEx");
BASS_ChannelGetData         = (uint32_t(*)(uint32_t, void*, uint32_t))dlsym(pBASSHandle, "BASS_ChannelGetData");
BASS_ChannelGetDevice       = (uint32_t(*)(uint32_t))dlsym(pBASSHandle, "BASS_ChannelGetDevice");
BASS_ChannelGetInfo         = (bool(*)(uint32_t, BASS_CHANNELINFO*))dlsym(pBASSHandle, "BASS_ChannelGetInfo");
BASS_ChannelGetLength       = (uint64_t(*)(uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_ChannelGetLength");
BASS_ChannelGetLevel        = (uint32_t(*)(uint32_t))dlsym(pBASSHandle, "BASS_ChannelGetLevel");
BASS_ChannelGetLevelEx      = (bool(*)(uint32_t, float*, float, uint32_t))dlsym(pBASSHandle, "BASS_ChannelGetLevelEx");
BASS_ChannelGetPosition     = (uint64_t(*)(uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_ChannelGetPosition");
BASS_ChannelGetTags         = (const char*(*)(uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_ChannelGetTags");
BASS_ChannelIsActive        = (uint32_t(*)(uint32_t))dlsym(pBASSHandle, "BASS_ChannelIsActive");
BASS_ChannelIsSliding       = (bool(*)(uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_ChannelIsSliding");
BASS_ChannelLock            = (bool(*)(uint32_t, bool))dlsym(pBASSHandle, "BASS_ChannelLock");
BASS_ChannelPause           = (bool(*)(uint32_t))dlsym(pBASSHandle, "BASS_ChannelPause");
BASS_ChannelPlay            = (bool(*)(uint32_t, bool))dlsym(pBASSHandle, "BASS_ChannelPlay");
BASS_ChannelRemoveDSP       = (bool(*)(uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_ChannelRemoveDSP");
BASS_ChannelRemoveFX        = (bool(*)(uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_ChannelRemoveFX");
BASS_ChannelRemoveLink      = (bool(*)(uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_ChannelRemoveLink");
BASS_ChannelRemoveSync      = (bool(*)(uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_ChannelRemoveSync");
BASS_ChannelSeconds2Bytes   = (uint64_t(*)(uint32_t, double))dlsym(pBASSHandle, "BASS_ChannelSeconds2Bytes");
BASS_ChannelSet3DAttributes = (bool(*)(uint32_t, int, float, float, int, int, float))dlsym(pBASSHandle, "BASS_ChannelSet3DAttributes");
BASS_ChannelSet3DPosition   = (bool(*)(uint32_t, const BASS_3DVECTOR*, const BASS_3DVECTOR*, const BASS_3DVECTOR*))dlsym(pBASSHandle, "BASS_ChannelSet3DPosition");
BASS_ChannelSetAttribute    = (bool(*)(uint32_t, uint32_t, float))dlsym(pBASSHandle, "BASS_ChannelSetAttribute");
BASS_ChannelSetAttributeEx  = (bool(*)(uint32_t, uint32_t, void*, uint32_t))dlsym(pBASSHandle, "BASS_ChannelSetAttributeEx");
BASS_ChannelSetDSP          = (uint32_t(*)(uint32_t, DSPPROC*, void*, int))dlsym(pBASSHandle, "BASS_ChannelSetDSP");
BASS_ChannelSetDevice       = (bool(*)(uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_ChannelSetDevice");
BASS_ChannelSetFX           = (uint32_t(*)(uint32_t, uint32_t, int))dlsym(pBASSHandle, "BASS_ChannelSetFX");
BASS_ChannelSetLink         = (bool(*)(uint32_t handle, uint32_t chan))dlsym(pBASSHandle, "BASS_ChannelSetLink");
BASS_ChannelSetPosition     = (bool(*)(uint32_t handle, uint64_t pos, uint32_t mode))dlsym(pBASSHandle, "BASS_ChannelSetPosition");
BASS_ChannelSetSync         = (uint32_t(*)(uint32_t handle, uint32_t type, uint64_t param, SYNCPROC* proc, void* user))dlsym(pBASSHandle, "BASS_ChannelSetSync");
BASS_ChannelSlideAttribute  = (bool(*)(uint32_t handle, uint32_t attrib, float value, uint32_t time))dlsym(pBASSHandle, "BASS_ChannelSlideAttribute");
BASS_ChannelStop            = (bool(*)(uint32_t))dlsym(pBASSHandle, "BASS_ChannelStop");
BASS_ChannelUpdate          = (bool(*)(uint32_t handle, uint32_t length))dlsym(pBASSHandle, "BASS_ChannelUpdate");
BASS_ErrorGetCode           = (int(*)(void))dlsym(pBASSHandle, "BASS_ErrorGetCode");
BASS_FXGetParameters        = (bool(*)(uint32_t handle, void *params))dlsym(pBASSHandle, "BASS_FXGetParameters");
BASS_FXReset                = (bool(*)(uint32_t handle))dlsym(pBASSHandle, "BASS_FXReset");
BASS_FXSetParameters        = (bool(*)(uint32_t handle, const void *params))dlsym(pBASSHandle, "BASS_FXSetParameters");
BASS_FXSetPriority          = (bool(*)(uint32_t handle, int priority))dlsym(pBASSHandle, "BASS_FXSetPriority");
BASS_Free                   = (bool(*)(void))dlsym(pBASSHandle, "BASS_Free");
BASS_Get3DFactors           = (bool(*)(float *distf, float *rollf, float *doppf))dlsym(pBASSHandle, "BASS_Get3DFactors");
BASS_Get3DPosition          = (bool(*)(BASS_3DVECTOR *pos, BASS_3DVECTOR *vel, BASS_3DVECTOR *front, BASS_3DVECTOR *top))dlsym(pBASSHandle, "BASS_Get3DPosition");
BASS_GetCPU                 = (float(*)(void))dlsym(pBASSHandle, "BASS_GetCPU");
BASS_GetConfig              = (uint32_t(*)(uint32_t option))dlsym(pBASSHandle, "BASS_GetConfig");
BASS_GetConfigPtr           = (const void*(*)(uint32_t option))dlsym(pBASSHandle, "BASS_GetConfigPtr");
BASS_GetDevice              = (uint32_t(*)(void))dlsym(pBASSHandle, "BASS_GetDevice");
BASS_GetDeviceInfo          = (bool(*)(uint32_t device, BASS_DEVICEINFO *info))dlsym(pBASSHandle, "BASS_GetDeviceInfo");
BASS_GetInfo                = (bool(*)(BASS_INFO *info))dlsym(pBASSHandle, "BASS_GetInfo");
BASS_GetVersion             = (uint32_t(*)(void))dlsym(pBASSHandle, "BASS_GetVersion");
BASS_GetVolume              = (float(*)(void))dlsym(pBASSHandle, "BASS_GetVolume");
BASS_Init                   = (bool(*)(int, uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_Init");
BASS_IsStarted              = (uint32_t(*)(void))dlsym(pBASSHandle, "BASS_IsStarted");
BASS_MusicFree              = (bool(*)(uint32_t handle))dlsym(pBASSHandle, "BASS_MusicFree");
BASS_MusicLoad              = (uint32_t(*)(bool, const void*, uint64_t, uint32_t, uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_MusicLoad");
BASS_Pause                  = (bool(*)(void))dlsym(pBASSHandle, "BASS_Pause");
/*BASS_RecordFree             = (bool(*)(void))dlsym(pBASSHandle, "BASS_RecordFree");
BASS_RecordGetDevice        = (uint32_t(*)(void))dlsym(pBASSHandle, "BASS_RecordGetDevice");
BASS_RecordGetDeviceInfo    = (bool(*)(uint32_t device, BASS_DEVICEINFO *info))dlsym(pBASSHandle, "BASS_RecordGetDeviceInfo");
BASS_RecordGetInfo          = (bool(*)(BASS_RECORDINFO *info))dlsym(pBASSHandle, "BASS_RecordGetInfo");
BASS_RecordGetInput         = (uint32_t(*)(int input, float *volume))dlsym(pBASSHandle, "BASS_RecordGetInput");
BASS_RecordGetInputName     = (const char*(*)(int input))dlsym(pBASSHandle, "BASS_RecordGetInputName");
BASS_RecordInit             = (bool(*)(int device))dlsym(pBASSHandle, "BASS_RecordInit");
BASS_RecordSetDevice        = (bool(*)(uint32_t device))dlsym(pBASSHandle, "BASS_RecordSetDevice");
BASS_RecordSetInput         = (bool(*)(int input, uint32_t flags, float volume))dlsym(pBASSHandle, "BASS_RecordSetInput");
BASS_RecordStart            = (uint32_t(*)(uint32_t freq, uint32_t chans, uint32_t flags, RECORDPROC *proc, void *user))dlsym(pBASSHandle, "BASS_RecordStart");*/
BASS_SampleCreate           = (uint32_t(*)(uint32_t length, uint32_t freq, uint32_t chans, uint32_t max, uint32_t flags))dlsym(pBASSHandle, "BASS_SampleCreate");
BASS_SampleFree             = (bool(*)(uint32_t handle))dlsym(pBASSHandle, "BASS_SampleFree");
BASS_SampleGetChannel       = (uint32_t(*)(uint32_t handle, uint32_t flags))dlsym(pBASSHandle, "BASS_SampleGetChannel");
BASS_SampleGetChannels      = (uint32_t(*)(uint32_t handle, uint32_t *channels))dlsym(pBASSHandle, "BASS_SampleGetChannels");
BASS_SampleGetData          = (bool(*)(uint32_t handle, void *buffer))dlsym(pBASSHandle, "BASS_SampleGetData");
BASS_SampleGetInfo          = (bool(*)(uint32_t handle, BASS_SAMPLE *info))dlsym(pBASSHandle, "BASS_SampleGetInfo");
BASS_SampleLoad             = (uint32_t(*)(bool mem, const void *file, uint64_t offset, uint32_t length, uint32_t max, uint32_t flags))dlsym(pBASSHandle, "BASS_SampleLoad");
BASS_SampleSetData          = (bool(*)(uint32_t handle, const void *buffer))dlsym(pBASSHandle, "BASS_SampleSetData");
BASS_SampleSetInfo          = (bool(*)(uint32_t handle, const BASS_SAMPLE *info))dlsym(pBASSHandle, "BASS_SampleSetInfo");
BASS_SampleStop             = (bool(*)(uint32_t handle))dlsym(pBASSHandle, "BASS_SampleStop");
BASS_Set3DFactors           = (bool(*)(float distf, float rollf, float doppf))dlsym(pBASSHandle, "BASS_Set3DFactors");
BASS_Set3DPosition          = (bool(*)(const BASS_3DVECTOR *pos, const BASS_3DVECTOR *vel, const BASS_3DVECTOR *front, const BASS_3DVECTOR *top))dlsym(pBASSHandle, "BASS_Set3DPosition");
BASS_SetConfig              = (bool(*)(uint32_t, uint32_t))dlsym(pBASSHandle, "BASS_SetConfig");
BASS_SetConfigPtr           = (bool(*)(uint32_t, const void*))dlsym(pBASSHandle, "BASS_SetConfigPtr");
BASS_SetDevice              = (bool(*)(uint32_t device))dlsym(pBASSHandle, "BASS_SetDevice");
BASS_SetVolume              = (bool(*)(float))dlsym(pBASSHandle, "BASS_SetVolume");
BASS_Start                  = (bool(*)(void))dlsym(pBASSHandle, "BASS_Start");
BASS_Stop                   = (bool(*)(void))dlsym(pBASSHandle, "BASS_Stop");
BASS_StreamCreate           = (uint32_t(*)(uint32_t freq, uint32_t chans, uint32_t flags, STREAMPROC *proc, void *user))dlsym(pBASSHandle, "BASS_StreamCreate");
BASS_StreamCreateFile       = (uint32_t(*)(bool mem, const void *file, uint64_t offset, uint64_t length, uint32_t flags))dlsym(pBASSHandle, "BASS_StreamCreateFile");
BASS_StreamCreateURL        = (uint32_t(*)(const char*, uint32_t, uint32_t, DOWNLOADPROC*))dlsym(pBASSHandle, "BASS_StreamCreateURL");
BASS_StreamFree             = (bool(*)(uint32_t handle))dlsym(pBASSHandle, "BASS_StreamFree");
BASS_StreamGetFilePosition  = (uint64_t(*)(uint32_t handle, uint32_t mode))dlsym(pBASSHandle, "BASS_StreamGetFilePosition");
BASS_StreamPutData          = (uint32_t(*)(uint32_t handle, const void *buffer, uint32_t length))dlsym(pBASSHandle, "BASS_StreamPutData");
BASS_StreamPutFileData      = (uint32_t(*)(uint32_t handle, const void *buffer, uint32_t length))dlsym(pBASSHandle, "BASS_StreamPutFileData");
BASS_Update                 = (bool(*)(uint32_t length))dlsym(pBASSHandle, "BASS_Update");